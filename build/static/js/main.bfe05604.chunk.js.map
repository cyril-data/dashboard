{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","useState","dataLoaded","setdataLoaded","clientInfo","setclientInfo","knnPred0","setknnPred0","knnPred1","setknnPred1","idClient","setIdClient","bigChartData","setBigChartData","drag","setDrag","dragExtS1","dragExtS2","useEffect","fetch","then","res","json","data","loaded","knn_pred_0","knn_pred_1","knnPred0Feature","knnPred1Feature","clientFeature","chartDoughnutOption","maintainAspectRatio","legend","display","rotation","Math","PI","circumference","tooltips","backgroundColor","titleFontColor","bodyFontColor","bodySpacing","xPadding","mode","intersect","position","responsive","option","feature","dragData","dragX","onDragStart","e","element","onDrag","datasetIndex","index","value","x","onDragEnd","scales","yAxes","barPercentage","gridLines","drawBorder","color","zeroLineColor","ticks","suggestedMin","suggestedMax","padding","fontColor","xAxes","callback","values","parseFloat","toFixed","chartDoughnut","clientProba","thserold","canvas","labels","datasets","overBackgroundColor","usePrevious","ref","useRef","current","className","Row","Col","Card","CardBody","tag","size","Form","inline","onSubmit","preventDefault","requestOptions","method","headers","body","JSON","stringify","response","infoIdClient","Input","type","onChange","target","Button","CardHeader","CardTitle","valueReturn","EXT_SOURCE_1","ExtS1_Change","xl","y_proba","y_pred","THR_OPTI","options","prev","EXT_SOURCE_2","ExtS2_Change","EXT_SOURCE_3","DAYS_EMPLOYED","DAYS_BIRTH","CREDIT_TERM","sm","ButtonGroup","data-toggle","classNames","active","id","onClick","defaultChecked","name","console","log","ctx","getContext","gradientStroke","createLinearGradient","addColorStop","gradientStroke2","gridX","pred0","y","pred1","label","fill","showLine","borderColor","borderWidth","borderDash","borderDashOffset","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","map","num","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bfe05604.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport logo from './logo.svg';\r\n// import './App.css';\r\n\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// // react plugin used to create charts\r\nimport { Line, Bar , Doughnut, Scatter} from \"react-chartjs-2\";\r\n\r\n// import Chart from 'chart.js'\r\n// load the options file externally for better readability of the component.\r\n// In the chartOptions object, make sure to add \"dragData: true\" etc.\r\n// import chartOptions from '~/assets/js/labour.js'\r\nimport 'chartjs-plugin-dragdata'\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  Label,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  UncontrolledTooltip\r\n} from \"reactstrap\";\r\n\r\n\r\n// // core components\r\n// import {\r\n//   chart,\r\n//   chartDoughnut,\r\n//   // chartExample2,\r\n//   // chartExample3,\r\n//   // chartExample4\r\n// } from \"./variables/charts.js\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [dataLoaded, setdataLoaded] = useState(0);\r\n  const [clientInfo, setclientInfo] = useState(0);\r\n  const [knnPred0, setknnPred0] = useState({});\r\n  const [knnPred1, setknnPred1] = useState({});\r\n  const [idClient, setIdClient] = useState(0);\r\n  const [bigChartData, setBigChartData] = useState(\"EXT_SOURCE_1\");\r\n  const [drag, setDrag] = useState(0);\r\n  const [dragExtS1, setDragExtS1] = useState(0);\r\n  const [dragExtS2, setDragExtS2] = useState(0);\r\n  const [dragExtS3, setDragExtS3] = useState(0);\r\n  const [dragDayE, setDragDayE] = useState(0);\r\n  const [dragDayB, setDragDayB] = useState(0);\r\n  const [dragCredT, setDragCredT] = useState(0);\r\n  const [switchDrag, setswitchDrag] = useState(0);\r\n  const [dragEnd, setdragEnd] = useState(0);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('/api/dashboard').then(res => res.json()).then(data => {\r\n      setdataLoaded(data.loaded)\r\n      setknnPred0(data.knn_pred_0);\r\n      setknnPred1(data.knn_pred_1);\r\n    });\r\n\r\n  }, []);\r\n\r\n\r\n  const handleSubmit = e => {\r\n  e.preventDefault();\r\n\r\n  const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(idClient)\r\n    };\r\n\r\n  fetch(\"/api/dashboard/id\", requestOptions)\r\n    .then(response => response.json())\r\n    .then(res => {\r\n      setclientInfo(res.infoIdClient);\r\n      setknnPred0(res.knn_pred_0);\r\n      setknnPred1(res.knn_pred_1);\r\n      // setDragExtS1(clientInfo.EXT_SOURCE_1);\r\n      // setDragExtS2(clientInfo.EXT_SOURCE_2);\r\n      // setDragExtS3(clientInfo.EXT_SOURCE_3);\r\n      // setDragDayE(clientInfo.DAYS_EMPLOYED);\r\n      // setDragDayB(clientInfo.DAYS_BIRTH);\r\n      // setDragCredT(clientInfo.CREDIT_TERM);\r\n    });\r\n\r\n  }\r\n\r\n  const handleChange = e => setIdClient(e.target.value)\r\n\r\n  // const setDrag = (feature, value) => {\r\n  //   feature == \"EXT_SOURCE_1\" && setDrag(value);\r\n  //   feature == \"EXT_SOURCE_2\" && setDragExtS2(value);\r\n  //   feature == \"EXT_SOURCE_3\" && setDragExtS3(value);\r\n  //   feature == \"DAYS_EMPLOYED\" && setDragDayE(value);\r\n  //   feature == \"DAYS_BIRTH\" && setDragDayB(value);\r\n  //   feature == \"CREDIT_TERM\" && setDragCredT(value);\r\n  // }\r\n\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // chart js\r\n\r\n  // function option() {\r\n    // \r\n\r\n   \r\n\r\n  //   return chart1_2_options\r\n\r\n  // }\r\n\r\n\r\n  const closest = (needle, haystack) => {\r\n    return haystack.reduce((a, b) => {\r\n        let aDiff = Math.abs(a - needle);\r\n        let bDiff = Math.abs(b - needle);\r\n\r\n        if (aDiff == bDiff) {\r\n            return a > b ? a : b;\r\n        } else {\r\n            return bDiff < aDiff ? b : a;\r\n        }\r\n    });\r\n  }\r\n\r\n  // const [dragXClient, setdragXClient] = useState(0);\r\n\r\n\r\n\r\n  let chartDoughnutOption = {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false\r\n    },\r\n    rotation: 1 * Math.PI,\r\n    circumference: 1 * Math.PI,\r\n    tooltips: {\r\n      backgroundColor: \"#f5f5f5\",\r\n      titleFontColor: \"#333\",\r\n      bodyFontColor: \"#666\",\r\n      bodySpacing: 4,\r\n      xPadding: 12,\r\n      mode: \"nearest\",\r\n      intersect: 0,\r\n      position: \"nearest\"\r\n    },\r\n    responsive: true\r\n  };\r\n\r\n\r\n  const option = (feature) => {\r\n    \r\n    const chart1_2_options = {\r\n      dragData: false,\r\n      dragX: false,\r\n\r\n      onDragStart: function(e, element) {\r\n      },\r\n      onDrag: function(e, datasetIndex, index, value) {\r\n        // update the point left and right of clicked point\r\n        // if the first point is clicked, only update the point to the right\r\n        if (index === 0) {\r\n        // if the last point is clicked, only update the point before\r\n            // all other cases\r\n          setDrag(value.x);\r\n          // feature == \"EXT_SOURCE_1\" && setDragExtS1(value.x);\r\n          // feature == \"EXT_SOURCE_2\" &&  setDragExtS2(value.x);\r\n          // feature == \"EXT_SOURCE_3\" &&  setDragExtS3(value.x);\r\n          // feature == \"DAYS_EMPLOYED\" &&  setDragDayE(value.x);\r\n          // feature == \"DAYS_BIRTH\" &&  setDragDayB(value.x);\r\n          // feature == \"CREDIT_TERM\" &&  setDragCredT(value.x);\r\n          // setDrag(value.x)\r\n        } else {\r\n          setDrag(value.x);\r\n          // all other cases\r\n          // feature == \"EXT_SOURCE_1\" && setDragExtS1(value.x);\r\n          // feature == \"EXT_SOURCE_2\" &&  setDragExtS2(value.x);\r\n          // feature == \"EXT_SOURCE_3\" &&  setDragExtS3(value.x);\r\n          // feature == \"DAYS_EMPLOYED\" &&  setDragDayE(value.x);\r\n          // feature == \"DAYS_BIRTH\" &&  setDragDayB(value.x);\r\n          // feature == \"CREDIT_TERM\" &&  setDragCredT(value.x);\r\n        }\r\n      },\r\n      onDragEnd: function(e, datasetIndex, index, value) {\r\n        // setDrag(value.x);\r\n        // setdragEnd(value.x);\r\n        // feature == \"EXT_SOURCE_1\" && setDragExtS1(value.x);\r\n        // feature == \"EXT_SOURCE_2\" &&  setDragExtS2(value.x);\r\n        // feature == \"EXT_SOURCE_3\" &&  setDragExtS3(value.x);\r\n        // feature == \"DAYS_EMPLOYED\" &&  setDragDayE(value.x);\r\n        // feature == \"DAYS_BIRTH\" &&  setDragDayB(value.x);\r\n        // feature == \"CREDIT_TERM\" &&  setDragCredT(value.x);\r\n\r\n      },\r\n      // dragDataRound: 0, // round to full integers (0 decimals)\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: true\r\n      },\r\n      tooltips: {\r\n        backgroundColor: \"#f5f5f5\",\r\n        titleFontColor: \"#333\",\r\n        bodyFontColor: \"#666\",\r\n        bodySpacing: 4,\r\n        xPadding: 12,\r\n        mode: \"nearest\",\r\n        intersect: 0,\r\n        position: \"nearest\"\r\n      },\r\n      responsive: true,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            barPercentage: 1.6,\r\n            gridLines: {\r\n              drawBorder: false,\r\n              color: \"rgba(29,140,248,0.0)\",\r\n              zeroLineColor: \"transparent\"\r\n            },\r\n            ticks: {\r\n              suggestedMin: 0,\r\n              suggestedMax: 1,\r\n              padding: 20,\r\n              fontColor: \"#9a9a9a\"\r\n            }\r\n          }\r\n        ],\r\n        xAxes: [\r\n          {\r\n            barPercentage: 10.,\r\n            gridLines: {\r\n              drawBorder: false,\r\n              color: \"rgba(29,140,248,0.1)\",\r\n              zeroLineColor: \"transparent\"\r\n            },\r\n            ticks: {\r\n              callback: function(value, index, values) {\r\n                  return parseFloat(value).toFixed(2);\r\n              },\r\n              suggestedMin: 0,\r\n              suggestedMax: 1,\r\n              padding: 20,\r\n              fontColor: \"#9a9a9a\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  \r\n    };\r\n    return chart1_2_options\r\n  }\r\n\r\n\r\n\r\n\r\n  const chart = (knnPred0Feature, knnPred1Feature, clientFeature, feature) => {\r\n\r\n    const chartExample1 = {\r\n      data: canvas => {\r\n        let ctx = canvas.getContext(\"2d\");\r\n\r\n        let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n        gradientStroke.addColorStop(1, \"rgba(66,134,121,0.2)\");\r\n        gradientStroke.addColorStop(0.4, \"rgba(66,134,121,0.0)\");\r\n        gradientStroke.addColorStop(0, \"rgba(66,134,121,0)\"); //green colors\r\n\r\n        let gradientStroke2 = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n        gradientStroke2.addColorStop(1, \"rgba(235,37,9,0.2)\");\r\n        gradientStroke2.addColorStop(0.4, \"rgba(235,37,9,0.0)\");\r\n        gradientStroke2.addColorStop(0, \"rgba(235,37,9,0)\"); //blue colors\r\n\r\n        const gridX = knnPred0Feature?knnPred0Feature.x:[0];\r\n        const pred0 = knnPred0Feature?knnPred0Feature.y:[];\r\n        const pred1 = knnPred1Feature?knnPred1Feature.y:[];\r\n\r\n\r\n        var numbers = [65, 44, 12, 4];\r\n\r\n        function dataPred0(num, index) {\r\n          return {x:num, y:pred0[index]};\r\n        }\r\n        function dataPred1(num, index) {\r\n          return {x:num, y:pred1[index]};\r\n        }\r\n\r\n        const dataScatter0 = gridX.map(dataPred0)\r\n        const dataScatter1 = gridX.map(dataPred1)\r\n        \r\n        // const clientBar = gridX.map((number, index) => number==closest(clientFeature,gridX)? Math.max(Math.max(...pred1),Math.max(...pred0)) :0);\r\n        // const clientBar = [0.5,Math.max(Math.max(...pred1),Math.max(...pred0)), 56, 0.98]\r\n        const clientBar = [{x:clientFeature, y:Math.max(Math.max(...pred1),Math.max(...pred0))}];\r\n\r\n        return {\r\n          // labels: gridX,\r\n          datasets: [\r\n            {\r\n              label: \"granted\",\r\n              dragData: false,\r\n              fill: true,\r\n              showLine: true,\r\n              backgroundColor: gradientStroke,\r\n              borderColor: \"#00d6b4\",\r\n              borderWidth: 2,\r\n              borderDash: [],\r\n              borderDashOffset: 0.0,\r\n              pointBorderColor: \"rgba(255,255,255,0)\",\r\n              pointHoverBackgroundColor: \"#00d6b4\",\r\n              pointBorderWidth: 20,\r\n              pointHoverRadius: 4,\r\n              pointHoverBorderWidth: 15,\r\n              pointRadius: 4,\r\n              data: dataScatter0,\r\n            }, \r\n            {\r\n              label: \"refused\",\r\n              dragData: false,\r\n              fill: true,\r\n              showLine: true,\r\n              backgroundColor: gradientStroke2,\r\n              borderColor: \"#eb2509\",\r\n              borderWidth: 2,\r\n              borderDash: [],\r\n              borderDashOffset: 0.0,\r\n              pointBorderColor: \"rgba(0,0,0,0)\",\r\n              pointHoverBackgroundColor: \"#eb2509\",\r\n              pointBorderWidth: 20,\r\n              pointHoverRadius: 4,\r\n              pointHoverBorderWidth: 15,\r\n              pointRadius: 4,\r\n              data: dataScatter1,\r\n            }, \r\n            {\r\n              label: \"Client\",\r\n              fill: true,\r\n              borderColor: \"white\",\r\n              pointBorderColor: \"white\",\r\n              pointHoverBackgroundColor: \"white\",\r\n              pointHoverRadius: 4,\r\n              // pointHoverBorderWidth: 15,\r\n              pointRadius: 4,\r\n              pointBorderWidth: 8,\r\n              data: clientBar\r\n            }, \r\n          ]\r\n        };\r\n      },\r\n      // options: chart1_2_options\r\n    };\r\n    // let chart1_2_options = option()\r\n    return [chartExample1.data, option(feature)]\r\n  }\r\n\r\n  const chartDoughnut = (clientProba, thserold) => {\r\n    const doughnut = {\r\n      data: canvas => {\r\n        return {\r\n          labels: [clientProba<=thserold?\"granted\":\"refused\", \"\"],\r\n          datasets: [\r\n            {\r\n              // label: \"My First dataset\",\r\n              // fill: true,\r\n              backgroundColor: [clientProba<=thserold?\"#00d6b4\":\"#eb2509\" ,\"#cccccc\"],\r\n              overBackgroundColor: [\r\n                \"#00d6b4\",\r\n                \"#cccccc\",\r\n              ],\r\n              data: [clientProba, 1-clientProba],\r\n            },\r\n          ]\r\n        };\r\n      },\r\n    };\r\n    return [doughnut.data, chartDoughnutOption]\r\n  }\r\n\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n  // *********************************************\r\n\r\n \r\n  // const ExtS1_Change = (feature) => {\r\n  //   if (feature == \"EXT_SOURCE_1\" ) {\r\n  //     if (drag) { return drag } \r\n  //     else { return 0} \r\n  //     }\r\n  //   else {return 0}    \r\n  // }\r\n\r\n\r\n  const ExtS1_Change = () => {\r\n    let valueReturn = 0\r\n\r\n    if (clientInfo.EXT_SOURCE_1){\r\n      valueReturn = clientInfo.EXT_SOURCE_1\r\n\r\n      if (bigChartData == \"EXT_SOURCE_1\" &&  drag ) { valueReturn = drag}\r\n      \r\n      if (bigChartData == \"EXT_SOURCE_1\" &&  dragExtS1 ) { valueReturn = dragExtS1}\r\n\r\n      if (bigChartData != \"EXT_SOURCE_1\" &&  dragExtS1 ) { valueReturn = dragExtS1}\r\n      \r\n    } else {\r\n      valueReturn = 0\r\n    }\r\n    return valueReturn\r\n  }\r\n\r\n\r\n\r\n  const ExtS2_Change = (prev) => {\r\n    let valueReturn = 0\r\n\r\n    if (clientInfo.EXT_SOURCE_2){\r\n      valueReturn = clientInfo.EXT_SOURCE_2\r\n\r\n      if (bigChartData == \"EXT_SOURCE_2\" &&  drag ) { valueReturn = drag}\r\n\r\n      if (bigChartData == \"EXT_SOURCE_2\" &&  dragExtS2 ) { valueReturn = dragExtS2}\r\n\r\n      if (bigChartData != \"EXT_SOURCE_2\" &&  dragExtS2 ) { valueReturn = dragExtS2}\r\n      \r\n    } else {\r\n      valueReturn = 0\r\n    }\r\n    return valueReturn\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const ExtS2_Change = () => {\r\n  //   if (bigChartData == \"EXT_SOURCE_2\") {\r\n  //     if (drag) { return drag } \r\n  //     else if (clientInfo.EXT_SOURCE_2) {\r\n  //       return clientInfo.EXT_SOURCE_2\r\n  //     } \r\n  //     else {return 0}\r\n  //   }\r\n  //   else if (clientInfo.EXT_SOURCE_2) {\r\n  //     return clientInfo.EXT_SOURCE_2\r\n  //   } \r\n  //   else {return 0}\r\n  //   // return 0\r\n  // }\r\n\r\n\r\n\r\n  const ExtS3_Change = () => {\r\n    if (dragExtS3) { return dragExtS3 } \r\n    else { \r\n      if (clientInfo.EXT_SOURCE_3) { return clientInfo.EXT_SOURCE_3} \r\n      else { return 0} \r\n    }\r\n  }\r\n  // const ExtS1_Change = () => {\r\n  //   if (dragExtS1) { return dragExtS1 } \r\n  //   else { \r\n  //     if (clientInfo.EXT_SOURCE_1) { return clientInfo.EXT_SOURCE_1} \r\n  //     else { return 0} \r\n  //   }\r\n  // }\r\n  // const ExtS1_Change = () => {\r\n  //   if (dragExtS1) { return dragExtS1 } \r\n  //   else { \r\n  //     if (clientInfo.EXT_SOURCE_1) { return clientInfo.EXT_SOURCE_1} \r\n  //     else { return 0} \r\n  //   }\r\n  // }\r\n  // const ExtS1_Change = () => {\r\n  //   if (dragExtS1) { return dragExtS1 } \r\n  //   else { \r\n  //     if (clientInfo.EXT_SOURCE_1) { return clientInfo.EXT_SOURCE_1} \r\n  //     else { return 0} \r\n  //   }\r\n  // }\r\n\r\n\r\n// Hook\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); \r\n  return ref.current;\r\n}\r\n\r\n\r\nconst prevCount= usePrevious(bigChartData)\r\nconst prevDrag= usePrevious(drag)\r\n\r\n\r\n\r\nconst handleChangeSwitchExt1 = () => {\r\n\r\n  // const prevCount = usePrevious(bigChartData)\r\n  setBigChartData(\"EXT_SOURCE_1\")\r\n  \r\n  // console.log(\"handleChangeSwitchExt1\", bigChartData)\r\n  // prevCount == \"EXT_SOURCE_1\" && setDragExtS1(drag);\r\n  // prevCount == \"EXT_SOURCE_2\" && setDragExtS2(drag);\r\n  // prevCount == \"EXT_SOURCE_3\" && setDragExtS3(drag);\r\n  // prevCount == \"DAYS_EMPLOYED\" && setDragDayE(drag);\r\n  // prevCount == \"DAYS_BIRTH\" && setDragDayB(drag);\r\n  // prevCount == \"CREDIT_TERM\" && setDragCredT(drag);\r\n\r\n  // setDrag(NaN)\r\n}\r\n\r\n\r\nconst handleChangeSwitchExt2 = () => {\r\n  console.log(\"handleChangeSwitchExt2\", bigChartData)\r\n\r\n  // prevCount == \"EXT_SOURCE_1\" && setDragExtS1(drag);\r\n  // prevCount == \"EXT_SOURCE_2\" && setDragExtS2(drag);\r\n  // prevCount == \"EXT_SOURCE_3\" && setDragExtS3(drag);\r\n  // prevCount == \"DAYS_EMPLOYED\" && setDragDayE(drag);\r\n  // prevCount == \"DAYS_BIRTH\" && setDragDayB(drag);\r\n  // prevCount == \"CREDIT_TERM\" && setDragCredT(drag);\r\n  // setDrag(NaN)\r\n  setBigChartData(\"EXT_SOURCE_2\")\r\n}\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      </header>\r\n        <Row >\r\n          <Col className=\"my-auto\">\r\n            <Card className=\"card-chart text-center align-center\" >\r\n              <CardBody >\r\n                <h3 className=\"mr-sm-2\" tag=\"h3\" className=\"justify-content-md-center\"> ID Client (&lt; {dataLoaded.size}) </h3>\r\n                <Form inline onSubmit={handleSubmit} className=\"justify-content\">\r\n                        <Input className=\"mb-2 mr-sm-2 mb-sm-0\" type=\"text\" \r\n                          value={idClient} \r\n                          onChange={handleChange}\r\n                        />\r\n                      <Button type=\"submit\" value=\"Submit\">Submit</Button>\r\n                </Form>\r\n              </CardBody>  \r\n            </Card>\r\n            <Card className=\"card-chart\">\r\n              <CardHeader>\r\n                <h5 className=\"card-category\">EXT_SOURCE_1</h5>\r\n                <CardTitle tag=\"h3\">\r\n                  <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                  {parseFloat(ExtS1_Change()).toFixed(2)}\r\n                </CardTitle>\r\n              </CardHeader>\r\n            </Card>\r\n          </Col>\r\n\r\n\r\n          <Col className=\"my-auto\" xl={8}  >\r\n            <Card className=\"card-chart\">\r\n              <CardBody>\r\n                <h3 >The current predict is {parseFloat(clientInfo.y_proba).toFixed(3)} : load {clientInfo.y_pred?\"REFUSED\":\"GRANTED\"}</h3> \r\n                <h4> \r\n                  thresold={parseFloat(dataLoaded.THR_OPTI).toFixed(2)}  \r\n                </h4> \r\n                <div className=\"chart-area\">\r\n                  <Doughnut \r\n                    data={chartDoughnut(clientInfo.y_proba?clientInfo.y_proba:dataLoaded.THR_OPTI, dataLoaded.THR_OPTI)[0]}\r\n                    options={chartDoughnut(clientInfo.y_proba?clientInfo.y_proba:dataLoaded.THR_OPTI, dataLoaded.THR_OPTI)[1]}\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col className=\"my-auto\">\r\n            <Row>\r\n              <Col >\r\n                  <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                      <h5 className=\"card-category\">EXT_SOURCE_2</h5>\r\n                      <CardTitle tag=\"h3\">\r\n                        <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                        {parseFloat(ExtS2_Change(prevCount)).toFixed(2)}\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col >\r\n                <Card className=\"card-chart\">\r\n                  <CardHeader>\r\n                    <h5 className=\"card-category\">EXT_SOURCE_3</h5>\r\n                    <CardTitle tag=\"h3\">\r\n                      <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                      {parseFloat(clientInfo.EXT_SOURCE_3?clientInfo.EXT_SOURCE_3:0).toFixed(2)}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                </Card>\r\n              </Col>\r\n\r\n\r\n              <Col >\r\n                  <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                      <h5 className=\"card-category\">DAYS_EMPLOYED</h5>\r\n                      <CardTitle tag=\"h3\">\r\n                        <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                        {parseFloat(clientInfo.DAYS_EMPLOYED?clientInfo.DAYS_EMPLOYED:0).toFixed(2)}\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n              </Col>\r\n              <Col >\r\n                  <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                      <h5 className=\"card-category\">DAYS_BIRTH</h5>\r\n                      <CardTitle tag=\"h3\">\r\n                        <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                        {parseFloat(clientInfo.DAYS_BIRTH?clientInfo.DAYS_BIRTH:0).toFixed(2)}\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n              </Col>\r\n              <Col >\r\n                  <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                      <h5 className=\"card-category\">CREDIT_TERM</h5>\r\n                      <CardTitle tag=\"h3\">\r\n                        <i className=\"tim-icons icon-bell-55 text-info\" />{\" \"}\r\n                        {parseFloat(clientInfo.CREDIT_TERM?clientInfo.CREDIT_TERM:0).toFixed(2)}\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"card-chart\">\r\n              <CardHeader>\r\n                <Row>\r\n                  <Col className=\"text-left\" sm=\"6\">\r\n                    <h5 className=\"card-category\" > Feature density  </h5>\r\n                    <CardTitle tag=\"h2\">500-nearest clients </CardTitle>\r\n                  </Col>\r\n                  <Col sm=\"6\">\r\n                    <ButtonGroup\r\n                      className=\"btn-group-toggle float-right\"\r\n                      data-toggle=\"buttons\"\r\n                    >\r\n                      <Button\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"EXT_SOURCE_1\"\r\n                          })}\r\n                        color=\"info\"\r\n                        id=\"0\"\r\n                        size=\"sm\"\r\n                        onClick={ handleChangeSwitchExt1                        }\r\n\r\n                      >\r\n                        <input\r\n                          defaultChecked\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          EXT_SOURCE_1\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-single-02\" />\r\n                        </span>\r\n                      </Button>\r\n                      <Button\r\n                        color=\"info\"\r\n                        id=\"1\"\r\n                        size=\"sm\"\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"EXT_SOURCE_2\"\r\n                          })}\r\n                        onClick={ handleChangeSwitchExt2 }\r\n                      >\r\n                        <input\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          EXT_SOURCE_2\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-gift-2\" />\r\n                        </span>\r\n                      </Button>\r\n                      <Button\r\n                        color=\"info\"\r\n                        id=\"2\"\r\n                        size=\"sm\"\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"EXT_SOURCE_3\"\r\n                          })}\r\n                        onClick={() => setBigChartData(\"EXT_SOURCE_3\")}\r\n                      >\r\n                        <input\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          EXT_SOURCE_3\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-tap-02\" />\r\n                        </span>\r\n                      </Button>\r\n                      <Button\r\n                        color=\"info\"\r\n                        id=\"3\"\r\n                        size=\"sm\"\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"DAYS_EMPLOYED\"\r\n                          })}\r\n                        onClick={() => setBigChartData(\"DAYS_EMPLOYED\")}\r\n                      >\r\n                        <input\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          DAYS_EMPLOYED\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-gift-2\" />\r\n                        </span>\r\n                      </Button>\r\n                      <Button\r\n                        color=\"info\"\r\n                        id=\"4\"\r\n                        size=\"sm\"\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"DAYS_BIRTH\"\r\n                          })}\r\n                        onClick={() => setBigChartData(\"DAYS_BIRTH\")}\r\n                      >\r\n                        <input\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          DAYS_BIRTH\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-gift-2\" />\r\n                        </span>\r\n                      </Button>\r\n                      <Button\r\n                        color=\"info\"\r\n                        id=\"5\"\r\n                        size=\"sm\"\r\n                        tag=\"label\"\r\n                        className={classNames(\"btn-simple\", {\r\n                            active: bigChartData === \"CREDIT_TERM\"\r\n                          })}\r\n                        onClick={() => setBigChartData(\"CREDIT_TERM\")}\r\n                      >\r\n                        <input\r\n                          className=\"d-none\"\r\n                          name=\"options\"\r\n                          type=\"radio\"\r\n                        />\r\n                        <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                          CREDIT_TERM\r\n                        </span>\r\n                        <span className=\"d-block d-sm-none\">\r\n                          <i className=\"tim-icons icon-gift-2\" />\r\n                        </span>\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n\r\n              <CardBody>\r\n                <div className=\"chart-area\">\r\n                  <Scatter\r\n                      data={chart(knnPred0[bigChartData], knnPred1[bigChartData], clientInfo[bigChartData], bigChartData)[0]}\r\n                      options={option(bigChartData)}\r\n                    />;\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        \r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport \"./assets/scss/black-dashboard-react.scss\";\r\nimport \"./assets/demo/demo.css\";\r\nimport \"./assets/css/nucleo-icons.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}